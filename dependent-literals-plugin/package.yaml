# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: dependent-literals-plugin
version: 0.1.0.1
category: Constraints
synopsis: Dependent integer literals
description: |
  This plugin implements pseudo-dependently-typed integer literals.

  This means the value of an integer literal is available at the type level,
  and can be used for things like validation or type inference.  For example,
  the 'SInt' instance refines unknown type-level 'Nat' variables to the
  particular literal value, and the 'Fin' instance emits compile-time errors
  for out-of-range values.  So, given
  @mkVec :: SInt n -> (Fin n -> a) -> Vec n a@, @mkVec 4@ will have type
  @(Fin 4 -> a) -> Vec 4 a@, and trying to type-check @4 :: Fin 4@ will report
  a type error saying that @4@ is out of range.

  Patterns get a similar treatment, too, so
  @case (x :: SInt n) of { 1 -> Just Refl; _ -> Nothing } :: Maybe (n :~: 1)@
  can type-check: the act of matching against 1 proved that the type-level @n@
  was equal to 1, so 'Refl' can type-check as @n :~: 1@.

  To use this, enable the extensions @DataKinds@, @FlexibleContexts@,
  @ViewPatterns@, and @TypeApplications@, add @dependent-literals@ and
  @dependent-literals-plugin@ to your package's dependencies, and add
  @-fplugin=DependentLiterals.Plugin@ to @ghc-options@ to enable the plugin
  globally, or use @OPTIONS_GHC@ pragmas to enable the plugin on a per-module
  basis.  \"Normal\" integral types should still behave as normal, but literals
  and numeric patterns will become supported for 'SInt' and 'Fin', and will
  provide additional information to the type checker automatically.

license: Apache-2.0
author: Andrew Pritchard <awpr@google.com>
copyright: 2019-2021 Google LLC
maintainer: Andrew Pritchard <awpr@google.com>
github: google/hs-dependent-literals/dependent-literals-plugin

# Note: this causes CHANGELOG.md to be included in Hackage distributions.
extra-source-files:
  CHANGELOG.md

dependencies:
  - base >= 4.12 && < 4.16

flags:
  error_message_tests:
    description: "Enable tests that emit error messages for inspection."
    manual: True
    default: False

library:
  source-dirs: src
  exposed-modules:
    - DependentLiterals.Plugin
  dependencies:
    - ghc >= 8.6 && < 9.1
    - syb >= 0.1 && < 0.8

  when:
    condition: false
    other-modules: Paths_dependent_literals_plugin

_test-template: &test-template
  main: Main.hs
  source-dirs: tests
  default-extensions:
    - NoStarIsType
    - DataKinds
    - FlexibleContexts
    - ViewPatterns
    - TypeApplications
  ghc-options: [-fplugin=DependentLiterals.Plugin]
  dependencies:
    - fin-int >= 0.1 && < 0.3
    - short-vec >= 0.1 && < 0.2
    - numeric-kinds >= 0.1 && < 0.2
    - sint >= 0.1 && < 0.2
    - snumber >= 0.1 && < 0.3
    - wrapped >= 0.1 && < 0.2
    - dependent-literals >= 0.1.1 && < 0.2
    - dependent-literals-plugin

  when:
    condition: false
    other-modules: Paths_dependent_literals_plugin

_error-test-template: &error-test-template
  <<: *test-template
  when:
    condition: "!flag(error_message_tests)"
    buildable: false

tests:
  Plugin-test:
    <<: *test-template
    other-modules:
      - Deriving
      - DoubleNegation
      - FinLiterals
      - FinPatterns
      - FractionalLiterals
      - FractionalPatterns
      - IntLiterals
      - IntPatterns
      - PolyLiterals
      - SIntLiterals
      - SIntPatterns
      - TestUtils
      - SNumberLiterals
      - WithNegativeLiterals
      - WordLiterals
      - WordPatterns
      - VecExamples

  FinErrors-test:
    <<: *error-test-template
    other-modules: [FinErrors]

  IntErrors-test:
    <<: *error-test-template
    other-modules: [IntErrors]

  PolyErrors-test:
    <<: *error-test-template
    other-modules: [PolyErrors]

  SIntErrors-test:
    <<: *error-test-template
    other-modules: [SIntErrors]

  SNumberErrors-test:
    <<: *error-test-template
    other-modules: [SNumberErrors]

  WordErrors-test:
    <<: *error-test-template
    other-modules: [WordErrors]
